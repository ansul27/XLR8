# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: xemelgo-app

# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-west-2'}

# you can overwrite defaults here

custom: 
  tableName1: Client
  tableName2: Location
  tableName3: Job
  tableName4: Employee
  tableName5: EmployeeType
  tableName6: EmployeeJob
  tableName7: Product
  tableName8: ProductClient


functions:
  hello:
    handler: handler.hello
    events:
     - http:
         path: users/create
         method: get

resources: 
  Resources: 
    ClientTable: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.tableName1}
        AttributeDefinitions:
          - AttributeName: ClientID
            AttributeType: N
          
        KeySchema: 
            - AttributeName: ClientID
              KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    LocationTable: 

      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.tableName2}
        AttributeDefinitions: 
          - AttributeName: LocationID
            AttributeType: N

        KeySchema: 
          - AttributeName: LocationID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    JobTable: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.tableName3}
        AttributeDefinitions: 
          - AttributeName: JobID
            AttributeType: N

        KeySchema: 
          - AttributeName: JobID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    EmployeeTable: 

      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.tableName4}
        AttributeDefinitions: 
          - AttributeName: EmployeeID
            AttributeType: N

        KeySchema: 
          - AttributeName: EmployeeID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    EmployeeTypeTable: 

      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.tableName5}
        AttributeDefinitions: 
          - AttributeName: EmployeeTypeID
            AttributeType: N

        KeySchema: 
          - AttributeName: EmployeeTypeID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    EmployeeJob: 

      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.tableName6}
        AttributeDefinitions: 
          - AttributeName: EmployeeJobID
            AttributeType: N

        KeySchema: 
          - AttributeName: EmployeeJobID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ProductTable: 

      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.tableName7}
        AttributeDefinitions: 
          - AttributeName: ProductID
            AttributeType: N
          
        KeySchema: 
          - AttributeName: ProductID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ProductClientTable: 

      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.tableName8}
        AttributeDefinitions: 
          - AttributeName: ProductClientID
            AttributeType: N

        KeySchema: 
          - AttributeName: ProductClientID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST










    
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
   
    #  - websocket: $connect
    #  - s3: ${env:BUCKET}
    #  - schedule: rate(10 minutes)
    #  - sns: greeter-topic
    #  - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
    #  - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
    #  - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
